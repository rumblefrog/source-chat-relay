name: Build & Deploy

on:
  - push
  - pull_request

env:
  SCRVER: ${{ github.sha }}

jobs:
  server:
    name: Build Server
    runs-on: ubuntu-latest

    env:
      GO111MODULE: "on"
      CGO_ENABLED: 0

    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Set version env
        run: echo ::set-env name=SCRVER::$(git describe --always --long --dirty)

      - name: Install Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.13.x"

      - name: Install NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Export bin paths
        run: |
          echo ::set-env name=GOPATH::$(go env GOPATH)
          echo ::set-env name=GOBIN::$(go env GOPATH)/bin
          echo ::add-path::$(go env GOPATH)/bin
          mkdir -p $(go env GOPATH)/bin

      - name: Install PostCSS CLI
        run: npm i -g postcss-cli

      - name: Install Golang Dep
        run: curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

      - name: Install Packr2
        run: go get -u -v github.com/gobuffalo/packr/v2/packr2

      - name: Install UPX
        run: |
          wget https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz
          tar -xf upx-3.95-amd64_linux.tar.xz
          mv upx-3.95-amd64_linux/upx $GITHUB_WORKSPACE/upx
      
      - name: Process UI
        working-directory: server/ui/template
        run: |
          yarn
          postcss styles.css -o dist/styles.css
          cp index.html dist/index.html

      - name: Install server dependencies
        working-directory: server
        run: go get -u

      - name: Pack UI files
        working-directory: server
        run: packr2

      - name: Create build folder
        working-directory: server
        run: mkdir build

      - name: Build Linux binary
        working-directory: server
        run: go build -ldflags "-s -w -X github.com/rumblefrog/source-chat-relay/server/config.SCRVER=$SCRVER -extldflags '-static'" -o build/linux-server

      - name: Build ARMv7 binary
        working-directory: server
        run: |
          export GOARCH=arm
          export GOARM=7
          go build -ldflags "-s -w -X github.com/rumblefrog/source-chat-relay/server/config.SCRVER=$SCRVER -extldflags '-static'" -o build/armv7-server

      - name: Build Windows binary
        working-directory: server
        run: |
          export GOOS=windows
          go build -ldflags "-s -w -X github.com/rumblefrog/source-chat-relay/server/config.SCRVER=$SCRVER -extldflags '-static'" -o build/windows-server

      - name: Upload server artifact
        uses: actions/upload-artifact@master
        with:
          name: Server
          path: server/build/

  client:
    name: Build Client
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Build sourcemod plugin
        uses: maxime1907/action-sourceknight@v1
        with:
          cmd: build

      - name: Create package
        run: |
          mkdir -p /tmp/package
          cp -R .sourceknight/package/* /tmp/package

      - name: Upload build archive for test runners
        uses: actions/upload-artifact@v3
        with:
          name: Plugin
          path: /tmp/package

  doc:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Export npm bin path
        run: export PATH=$PATH:$(npm bin -g)

      - name: Install yarn
        run: npm i -g yarn

      - name: Install dependencies
        working-directory: docs
        run: yarn

      - name: Build documentation
        working-directory: docs
        run: yarn gatsby build --prefix-paths

  tag:
    name: Tag
    needs:
      - client
      - server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

      - uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        with:
          delete_release: true
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: rickstaa/action-create-tag@v1
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        with:
          tag: "latest"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs:
      - client
      - server
      - tag
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Versioning
        run: |
          version="latest"
          if [[ "${{ github.ref_type }}" == 'tag' ]]; then
            version=`echo $GITHUB_REF | sed "s/refs\/tags\///"`;
          fi
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV

      - name: Package
        run: |
          ls -Rall
          tar -czf ${{ github.event.repository.name }}-${{ env.RELEASE_VERSION }}.tar.gz Plugin Server

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: ${{ env.RELEASE_VERSION }}
          file_glob: true
          overwrite: true
